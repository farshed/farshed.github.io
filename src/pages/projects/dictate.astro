---
import Raw from '../../layouts/Raw.astro';
---

<Raw>
  <div class="bg-gray-100 flex items-center justify-center h-screen">
    <div class="bg-white p-6 rounded-2xl shadow-lg w-full max-w-md">
      <h1 class="text-xl font-bold mb-4 text-center">Dictate</h1>
      <textarea
        id="output"
        class="w-full h-40 p-3 border rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400"
        placeholder="Speak and your words shall appear here... choose them wisely!"></textarea>
      <div class="flex justify-center mt-4">
        <button
          id="toggleBtn"
          class="bg-blue-500 hover:bg-blue-600 text-white p-4 rounded-full shadow"
        >
        </button>
      </div>
    </div>
  </div>
</Raw>

<script lang="js">
  const output = document.getElementById('output');
  const toggleBtn = document.getElementById('toggleBtn');

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    alert("your browser doesn't support speech recognition.");
  } else {
    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    let listening = false;
    let finalText = '';

    toggleBtn.addEventListener('click', () => {
      if (!listening) {
        recognition.start();
        toggleBtn.textContent = '⏺︎';
        toggleBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
        toggleBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        listening = true;
      } else {
        recognition.stop();
        toggleBtn.textContent = '🎙️';
        toggleBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
        toggleBtn.classList.add('bg-blue-500', 'hover:bg-blue-600');
        listening = false;
      }
    });

    recognition.onresult = (event) => {
      let interimTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalText += transcript + ' ';
        } else {
          interimTranscript += transcript;
        }
      }
      // show final text + realtime interim
      output.value = finalText + interimTranscript;
    };

    recognition.onerror = (event) => {
      console.error('speech recognition error:', event.error);
    };

    recognition.onend = () => {
      if (listening) recognition.start(); // auto-restart unless explicitly stopped
    };
  }
</script>
